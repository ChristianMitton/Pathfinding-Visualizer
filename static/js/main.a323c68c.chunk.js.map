{"version":3,"sources":["algorithms/copyObjects.js","logo.svg","dataStructures/GraphNode.js","algorithms/bfs.js","dataStructures/Queue.js","algorithms/dfs.js","algorithms/aStar.js","algorithms/dijkstra.js","algorithms/mazeGeneration.js","components/Node/Node.js","components/PathFinder.js","components/App.js","serviceWorker.js","index.js"],"names":["clone","obj","copy","constructor","attr","hasOwnProperty","copy2dArrayOfObjects","array","result","row","newRow","col","copiedObj","push","modify","newObj","Object","keys","forEach","key","module","exports","GraphNode","value","this","visited","isStart","isFinish","isWall","gCost","hCost","fCost","parent","hover","isAStarStart","next","prev","topWall","rightWall","bottomWall","leftWall","weight","Infinity","Queue","require","copyObjects","addChildrenToQueue","grid","currentNode","queue","numRows","numCols","enqueue","bfs","mainGrid","startNode","endNode","console","log","visitedNodes","isEmpty","dequeue","items","element","shift","length","index","shouldContinueAdding","dfs","finalArray","dfsHelper","children","getChildren","child","getNeighbors","topLeftNeighbor","topNeighbor","topRightNeighbor","rightNeighbor","bottomRighNeighbor","bottomNeighbor","bottomLeftNeighbor","leftNeighbor","arrayOfNeighbors","e","calculateGCost","yDistance","Math","abs","xDistance","floor","sqrt","calculateHCost","getLowestFCostNodeFromOpenArray","open","min","minNode","inClosedArray","node","closed","i","inOpenArray","removeFromArray","splice","aStar","neighbors","currentNeighbor","dikstra","getRandomNumberBetween","max","random","createChamber","generateMazeRec","topLeftNode","topRightNode","bottomRightNode","bottomLeftNode","width","height","orientation","chooseOrientation","newCorners","randomRowIndex","randomGap","newTopLeftNode","newTopRightNode","newBottomRightNode","newBottomLeftNode","bisectHorizontally","randomColIndex","bisectVertically","Node","props","state","onMouseDown","onMouseEnter","onMouseUp","extraClassName","className","Component","default","dijkstra","generateMaze","DEFAULT_START_NODE_ROW","DEFAULT_START_NODE_COL","DEFAULT_FINISH_NODE_ROW","DEFAULT_FINISH_NODE_COL","PathFinder","mouseIsPressed","clickedStart","clickedFinish","createDefaultGrid","setState","newGrid","window","location","reload","getNewGridWithWallToggled","getNewGridWithUpdatedFinishNode","getNewGridWithUpdatedStartNode","finishNode","animate","animateMaze","setTimeout","updatedGrid","count","trigger","type","onClick","visualizeBFS","visualizeDFS","visualizeAStar","visualizeDijkstra","clear","stopAlgorithm","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","newNode","oldRow","oldCol","oldStartNode","newStartNode","oldStartNodeCopy","newStartNodeCopy","oldFinishNode","newFinishNode","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a323c68c.chunk.js","sourcesContent":["function clone(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    let copy = new obj.constructor();\n    for (let attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nfunction copy2dArrayOfObjects(array){\n    let result = []\n    for(let row in array){\n        let newRow = []\n        for(let col in array[row]){\n            let copiedObj = clone(array[row][col]);\n            newRow.push(copiedObj);\n        }\n        result.push(newRow);\n    }\n\n    return result;\n}\n\nfunction modify(obj, newObj) {\n\n    Object.keys(obj).forEach(function(key) {\n      delete obj[key];\n    });\n  \n    Object.keys(newObj).forEach(function(key) {\n      obj[key] = newObj[key];\n    });\n    \n  }\n\n\n// module.exports.copy2dArrayOfObjects = copy2dArrayOfObjects;\n// module.exports.clone = clone;\n// module.exports.modify = modify;\n\nexport {\n  copy2dArrayOfObjects,\n  modify,\n  clone\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","class GraphNode {\n    constructor(value, row, col){\n        this.value = value;\n        this.row = row;\n        this.col = col; \n        this.visited = false;\n        this.isStart = false;\n        this.isFinish = false;\n        this.isWall = false;\n        this.gCost = 0;\n        this.hCost = 0;\n        this.fCost = 0;\n        this.parent = null;\n        this.hover = false;\n        this.isAStarStart = false;        \n        this.next = null;    \n        this.prev = null;\n        this.topWall = false;\n        this.rightWall = false;\n        this.bottomWall = false;\n        this.leftWall = false;\n        this.weight = Infinity;            \n    }\n}\n\nexport default GraphNode;","let Queue = require('../dataStructures/Queue');\n//let addChildrenToQueue = require('./addChildrenToQueue')\nlet copyObjects = require('./copyObjects');\n\nfunction bfs(mainGrid, startNode, endNode, numRows, numCols){    \n    console.log(`Start Node: row:${startNode.row} col:${startNode.col}`);\n    console.log(`End Node: row:${endNode.row} col:${endNode.col}`);\n    console.log();\n    let queue = new Queue();\n\n    //console.log(`Here is the main grid after splicing: ${mainGrid}`);\n    //let grid = [...mainGrid];\n    let grid = copyObjects.copy2dArrayOfObjects(mainGrid);\n    \n    //console.log(`Here is the temp grid after splicing: ${grid}`);\n\n    let visitedNodes = [];    \n    \n    grid[startNode.row][startNode.col].visited = true;\n\n    queue.enqueue(startNode);   \n\n    while(!queue.isEmpty()){\n        let currentNode = queue.dequeue();        \n        // append current node to visited array\n        visitedNodes.push(currentNode);\n\n        let {row, col} = currentNode;        \n\n        //console.log(`currentNode: <node>(${row},${col})`);\n\n        if(row === endNode.row && col === endNode.col){            \n            console.log(\"Reached destination\");\n            return visitedNodes;\n        }\n        \n        addChildrenToQueue(grid, currentNode, queue, numRows, numCols); \n\n        //process.stdout.write(\"Queue contents after adding children:\");\n        //queue.printGraphQueue();\n    }\n\n    console.log(\"Did not reach destination\");\n    return visitedNodes;\n}\n\nfunction addChildrenToQueue(grid, currentNode, queue, numRows, numCols){    \n            \n        // console.log(\"...\")\n        // console.log(`About to assign ${currentNode}, ${currentNode}`)\n\n        let {row, col} = currentNode;    \n\n        // console.log(`Here is the row, col ${row}, ${col}`)\n\n\n    /*\n    ?   ---------------------------------------------------\n    ?   |               Corner edge cases                 |\n    ?   ---------------------------------------------------\n    */\n    //! top left corner\n    if(row === 0 && col === 0) {            \n        //right child\n        if(!grid[row][col+1].visited){\n            grid[row][col+1].visited = true;\n            queue.enqueue(grid[row][col+1])\n        }\n\n        //bottom child\n        if(!grid[row+1][col].visited){\n            grid[row+1][col].visited = true;\n            queue.enqueue(grid[row+1][col])    \n        }\n        return;             \n    }\n    //! top right corner\n    else if(row === 0 && col === (numCols-1)){\n        //bottom child\n        if(!grid[row+1][col].visited){\n            grid[row+1][col].visited = true;\n            queue.enqueue(grid[row+1][col]) \n        }        \n\n        //left child\n        if(!grid[row][col-1].visited){\n            grid[row][col-1].visited = true;\n            queue.enqueue(grid[row][col-1]) \n        }        \n        return;\n    }\n    //! bottom right corner\n    else if(row === (numRows-1) && col === (numCols-1)){\n        //top child\n        if(!grid[row-1][col].visited){\n            grid[row-1][col].visited = true;\n            queue.enqueue(grid[row-1][col]) \n        }        \n\n        //left child\n        if(!grid[row][col-1].visited){\n            grid[row][col-1].visited = true;\n            queue.enqueue(grid[row][col-1]) \n        }        \n        return;\n    }\n    //! bottom left corner\n    else if(row === (numRows-1) && col === 0){\n        //top child\n        if(!grid[row-1][col].visited){\n            grid[row-1][col].visited = true;\n            queue.enqueue(grid[row-1][col]) \n        }        \n\n        //right child\n        if(!grid[row][col+1].visited){\n            grid[row][col+1].visited = true;\n            queue.enqueue(grid[row][col+1]) \n        }        \n        return;\n    }\n    /*\n    ?   ---------------------------------------------------\n    ?   |               Border edge cases                 |\n    ?   ---------------------------------------------------\n    */\n    //! top border\n    else if(row === 0){\n        //right child\n        if(!grid[row][col+1].visited){\n            grid[row][col+1].visited = true;\n            queue.enqueue(grid[row][col+1]) \n        }        \n\n        //bottom child\n        if(!grid[row+1][col].visited){\n            grid[row+1][col].visited = true;\n            queue.enqueue(grid[row+1][col]) \n        }\n        \n        //left child  \n        if(!grid[row][col-1].visited){\n            grid[row][col-1].visited = true;\n            queue.enqueue(grid[row][col-1])            \n        }        \n        return;\n    }\n    //! right border\n    else if(col === numCols-1){\n        //top child\n        if(!grid[row-1][col].visited){\n            grid[row-1][col].visited = true;\n            queue.enqueue(grid[row-1][col]) \n        }\n        //bottom child\n        if(!grid[row+1][col].visited){\n            grid[row+1][col].visited = true;\n            queue.enqueue(grid[row+1][col]) \n        }\n        \n        //left child\n        if(!grid[row][col-1].visited){\n            grid[row][col-1].visited = true;\n            queue.enqueue(grid[row][col-1])            \n        }        \n        \n        return;\n    }\n    //! bottom border\n    else if(row === numRows-1){\n        //top child\n        if(!grid[row-1][col].visited){\n            grid[row-1][col].visited = true;\n            queue.enqueue(grid[row-1][col]) \n        }\n        \n        //right child\n        if(!grid[row][col+1].visited){\n            grid[row][col+1].visited = true;\n            queue.enqueue(grid[row][col+1]) \n        }\n        //left child\n        if(!grid[row][col-1].visited){\n            grid[row][col-1].visited = true;\n            queue.enqueue(grid[row][col-1])            \n        }     \n        \n        return;\n    }\n    //! left border\n    else if(col === 0){\n        //top child\n        if(!grid[row-1][col].visited){\n            grid[row-1][col].visited = true;\n            queue.enqueue(grid[row-1][col]) \n        }\n        \n        //right child\n        if(!grid[row][col+1].visited){\n            grid[row][col+1].visited = true;\n            queue.enqueue(grid[row][col+1]) \n        } \n        \n        //bottom child\n        if(!grid[row+1][col].visited){\n            grid[row+1][col].visited = true;\n            queue.enqueue(grid[row+1][col]) \n        } \n        return;\n    } \n    /*\n    ?   ---------------------------------------------------\n    ?   |          General Node with 8 children           | \n    ?   ---------------------------------------------------\n    */\n    else {\n        //top child\n        if(!grid[row-1][col].visited && !grid[row-1][col].isWall){\n            grid[row-1][col].visited = true;\n            queue.enqueue(grid[row-1][col]) \n        }                \n\n        //right child\n        if(!grid[row][col+1].visited && !grid[row][col+1].isWall){\n            grid[row][col+1].visited = true;\n            queue.enqueue(grid[row][col+1]) \n        }         \n\n        //bottom child\n        if(!grid[row+1][col].visited && !grid[row+1][col].isWall){\n            grid[row+1][col].visited = true;\n            queue.enqueue(grid[row+1][col]) \n        }         \n\n        //left child\n        if(!grid[row][col-1].visited && !grid[row][col-1].isWall){\n            grid[row][col-1].visited = true;\n            queue.enqueue(grid[row][col-1])            \n        }\n    }   \n\nreturn;\n}\n\n\n//export default bfs;\nexport default bfs;","class Queue {\n    constructor(){\n        this.items = [];\n    }\n\n    enqueue(element){\n        this.items.push(element);\n    }\n\n    dequeue(element){\n        if(this.isEmpty()){\n            console.log(\"Empty queue\");\n            return;\n        }\n        return this.items.shift();\n    }\n\n    isEmpty(){\n        if(this.items.length === 0){\n            return true;\n        }\n        return false;\n    }\n\n    printQueue(){\n        for(let index in this.items){\n            console.log(this.items[index]);\n        }\n    }\n\n    printGraphQueue(){\n        console.log();\n        //process.stdout.write(\"[ \");\n        for(let index in this.items){\n            console.log(`(${this.items[index].row},${this.items[index].col}), `);\n            //process.stdout.write(`(${this.items[index].row},${this.items[index].col}), `);\n        }\n        console.log(\"]\");\n    }\n}\n\nmodule.exports = Queue;","// let GraphNode = require('../dataStructures/GraphNode');\n// let Queue = require('../dataStructures/Queue');\n//let addChildrenToQueue = require('./addChildrenToQueue');\nlet copyObjects = require('./copyObjects');\n\nlet shouldContinueAdding = true\n\nfunction dfs(mainGrid, startNode, endNode, numRows, numCols){\n    let grid = copyObjects.copy2dArrayOfObjects(mainGrid);   \n\n    let finalArray = []\n    \n    dfsHelper(grid, startNode, endNode, numRows, numCols, finalArray);\n\n    console.log(\"Here\")\n    console.log(`Sending ${finalArray} back`)\n    return finalArray;\n}\n\nfunction dfsHelper(grid, startNode, endNode, numRows, numCols, finalArray){\n    \n    if(startNode.row === endNode.row && startNode.col === endNode.col){                    \n        console.log(`Reached destination at ${startNode.row},${startNode.col} sending this array back ${finalArray}`)\n        shouldContinueAdding = false\n        return;\n    } \n\n    let children = getChildren(grid, startNode, numRows, numCols)    \n\n    for(let index in children){\n        //do something with element\n        let child = children[index]\n        if(shouldContinueAdding){\n            finalArray.push(child)\n        }\n\n        dfsHelper(grid, child, endNode, numRows, numCols, finalArray);\n    }\n\n    return finalArray\n}\n\n\nfunction getChildren(grid, currentNode, numRows, numCols){  \n\n    let {row, col} = currentNode;    \n\n    let result = []\n\n    /*\n    ?   ---------------------------------------------------\n    ?   |               Corner edge cases                 |\n    ?   ---------------------------------------------------\n    */\n    //! top left corner\n    if(row === 0 && col === 0) {            \n        //right child\n        if(!grid[row][col+1].visited && !grid[row][col+1].isWall && !grid[row][col+1].isWall){\n            grid[row][col+1].visited = true;\n            result.push(grid[row][col+1])\n        }\n\n        //bottom child\n        if(!grid[row+1][col].visited && !grid[row+1][col].isWall){\n            grid[row+1][col].visited = true;\n            result.push(grid[row+1][col])    \n        }\n        return result;\n    }\n    //! top right corner\n    else if(row === 0 && col === (numCols-1)){\n        //bottom child\n        if(!grid[row+1][col].visited && !grid[row+1][col].isWall){\n            grid[row+1][col].visited = true;\n            result.push(grid[row+1][col]) \n        }        \n\n        //left child\n        if(!grid[row][col-1].visited && !grid[row][col-1].isWall){\n            grid[row][col-1].visited = true;\n            result.push(grid[row][col-1]) \n        }        \n        return result;\n    }\n    //! bottom right corner\n    else if(row === (numRows-1) && col === (numCols-1)){\n        //top child\n        if(!grid[row-1][col].visited && !grid[row-1][col].isWall){\n            grid[row-1][col].visited = true;\n            result.push(grid[row-1][col]) \n        }        \n\n        //left child\n        if(!grid[row][col-1].visited && !grid[row][col-1].isWall){\n            grid[row][col-1].visited = true;\n            result.push(grid[row][col-1]) \n        }        \n        return result;\n    }\n    //! bottom left corner\n    else if(row === (numRows-1) && col === 0){\n        //top child\n        if(!grid[row-1][col].visited && !grid[row-1][col].isWall){\n            grid[row-1][col].visited = true;\n            result.push(grid[row-1][col]) \n        }        \n\n        //right child\n        if(!grid[row][col+1].visited && !grid[row][col+1].isWall){\n            grid[row][col+1].visited = true;\n            result.push(grid[row][col+1]) \n        }        \n        return result;\n    }\n    /*\n    ?   ---------------------------------------------------\n    ?   |               Border edge cases                 |\n    ?   ---------------------------------------------------\n    */\n    //! top border\n    else if(row === 0){\n        //right child\n        if(!grid[row][col+1].visited && !grid[row][col+1].isWall){\n            grid[row][col+1].visited = true;\n            result.push(grid[row][col+1]) \n        }        \n\n        //bottom child\n        if(!grid[row+1][col].visited && !grid[row+1][col].isWall){\n            grid[row+1][col].visited = true;\n            result.push(grid[row+1][col]) \n        }\n        \n        //left child  \n        if(!grid[row][col-1].visited && !grid[row][col-1].isWall){\n            grid[row][col-1].visited = true;\n            result.push(grid[row][col-1])            \n        }        \n        return result;\n    }\n    //! right border\n    else if(col === numCols-1){\n        //top child\n        if(!grid[row-1][col].visited && !grid[row-1][col].isWall){\n            grid[row-1][col].visited = true;\n            result.push(grid[row-1][col]) \n        }\n        //bottom child\n        if(!grid[row+1][col].visited && !grid[row+1][col].isWall){\n            grid[row+1][col].visited = true;\n            result.push(grid[row+1][col]) \n        }\n        \n        //left child\n        if(!grid[row][col-1].visited && !grid[row][col-1].isWall){\n            grid[row][col-1].visited = true;\n            result.push(grid[row][col-1])            \n        }        \n        \n        return result;\n    }\n    //! bottom border\n    else if(row === numRows-1){\n        //top child\n        if(!grid[row-1][col].visited && !grid[row-1][col].isWall){\n            grid[row-1][col].visited = true;\n            result.push(grid[row-1][col]) \n        }\n        \n        //right child\n        if(!grid[row][col+1].visited && !grid[row][col+1].isWall){\n            grid[row][col+1].visited = true;\n            result.push(grid[row][col+1]) \n        }\n        //left child\n        if(!grid[row][col-1].visited && !grid[row][col-1].isWall){\n            grid[row][col-1].visited = true;\n            result.push(grid[row][col-1])            \n        }     \n        \n        return result;\n    }\n    //! left border\n    else if(col === 0){\n        //top child\n        if(!grid[row-1][col].visited && !grid[row-1][col].isWall){\n            grid[row-1][col].visited = true;\n            result.push(grid[row-1][col]) \n        }\n        \n        //right child\n        if(!grid[row][col+1].visited && !grid[row][col+1].isWall){\n            grid[row][col+1].visited = true;\n            result.push(grid[row][col+1]) \n        } \n        \n        //bottom child\n        if(!grid[row+1][col].visited && !grid[row+1][col].isWall){\n            grid[row+1][col].visited = true;\n            result.push(grid[row+1][col]) \n        } \n        return result;\n    } \n    /*\n    ?   ---------------------------------------------------\n    ?   |          General Node with 8 children           | \n    ?   ---------------------------------------------------\n    */\n    else {\n        //top child\n        if(!grid[row-1][col].visited && !grid[row-1][col].isWall){\n            grid[row-1][col].visited = true;\n            result.push(grid[row-1][col]) \n        }                \n\n        //right child\n        if(!grid[row][col+1].visited && !grid[row][col+1].isWall){\n            grid[row][col+1].visited = true;\n            result.push(grid[row][col+1]) \n        }         \n\n        //bottom child\n        if(!grid[row+1][col].visited && !grid[row+1][col].isWall){\n            grid[row+1][col].visited = true;\n            result.push(grid[row+1][col]) \n        }         \n\n        //left child\n        if(!grid[row][col-1].visited && !grid[row][col-1].isWall){\n            grid[row][col-1].visited = true;\n            result.push(grid[row][col-1])            \n        }\n    }   \n\n    return result;\n}\n\nexport default dfs;","let copyObjects = require('./copyObjects');\n\n\nfunction aStar(mainGrid, startNode, endNode, numRows, numCols){\n    \n    let grid = copyObjects.copy2dArrayOfObjects(mainGrid);\n\n    let finalArray = []\n\n    startNode.isAStarStart = true;\n    \n    //* 1.)\n    let open = []\n    //* 2.)\n    let closed = []\n    \n    open.push(startNode)\n    \n    while(open.length > 0){\n        //get node with lowest f cost\n        let currentNode = getLowestFCostNodeFromOpenArray(open)        \n        // console.log(1)\n        \n        if(currentNode.isAStarStart === true){\n            // console.log(`At start node ${currentNode.row}, ${currentNode.col}`)    \n        } else {\n            //console.log(`currentNode: ${currentNode.row},${currentNode.col} [G: ${currentNode.gCost}, H:${currentNode.hCost}, F:${currentNode.fCost}] parent: (${currentNode.parent.row}, ${currentNode.parent.col})`)\n            // console.log(`Choosing node With lowest f Cost: ${currentNode.row},${currentNode.col} [G: ${currentNode.gCost}, H:${currentNode.hCost}, F:${currentNode.fCost}] parent: (${currentNode.parent.row}, ${currentNode.parent.col})`)\n        }\n\n        // finalArray.push(currentNode)\n        \n        if(currentNode.parent != null){ //---------------->\n        //if(currentNode != null){\n            //finalArray.push(currentNode.parent)            \n        }        \n\n        removeFromArray(currentNode, open)        \n\n        if(currentNode.row === endNode.row && currentNode.col === endNode.col){            \n            // console.log(\"Reached Destination\")\n            return finalArray\n        }\n        \n        if(inClosedArray(currentNode, closed) || currentNode.isWall){\n            continue\n        }        \n\n        let neighbors = getNeighbors(currentNode, grid)        \n\n        for(let index in neighbors){            \n            let currentNeighbor = neighbors[index]\n\n            if(currentNeighbor.isWall){\n                continue\n            }\n\n            // if at destination\n            if(currentNeighbor.row === endNode.row && currentNeighbor.col === endNode.col){            \n                // console.log(\"Reached Destination\")\n                return finalArray\n            }\n\n            // recently added\n            // if(currentNeighbor.isAStarStart === true){\n            //     continue\n            // }            \n\n            if(!inOpenArray(currentNeighbor, open) || currentNeighbor.parent == null || currentNeighbor.parent.fCost < currentNode.fCost/* new path to currentNeighbor is shorter */){                  \n                currentNeighbor.gCost = calculateGCost(currentNeighbor, startNode)\n                currentNeighbor.hCost = calculateHCost(currentNeighbor, endNode)\n                currentNeighbor.fCost = currentNeighbor.hCost\n                \n                currentNeighbor.parent = currentNode\n\n                // console.log(`---- neighbor ${currentNeighbor.row},${currentNeighbor.col} [g: ${currentNeighbor.gCost} h: ${currentNeighbor.hCost} f: ${currentNeighbor.fCost}]`)\n\n                // currentNode.parent = currentNeighbor\n\n                // NEW\n                finalArray.push(currentNeighbor)                \n\n                if(!inOpenArray(currentNeighbor, open)){\n                    open.push(currentNeighbor)\n                }\n            }            \n        }\n        closed.push(currentNode)        \n        \n    }\n\n    // console.log('did not reach destination')\n}\n\nfunction getNeighbors(currentNode, grid){\n    let {row, col} = currentNode\n\n    //the column of the start node detemines the currentNodes gCost\n    // Math.abs(col*sqrt(2) - startNode.col*sqrt(2))\n    \n    try{\n        let topLeftNeighbor = grid[row-1][col-1]\n        let topNeighbor = grid[row-1][col]\n        let topRightNeighbor = grid[row-1][col+1]\n        let rightNeighbor = grid[row][col+1]\n        let bottomRighNeighbor = grid[row+1][col+1]\n        let bottomNeighbor = grid[row+1][col]\n        let bottomLeftNeighbor = grid[row+1][col-1]\n        let leftNeighbor = grid[row][col-1]  \n\n        let arrayOfNeighbors = []\n\n        arrayOfNeighbors.push(topLeftNeighbor)\n        arrayOfNeighbors.push(topNeighbor)\n        arrayOfNeighbors.push(topRightNeighbor)\n        arrayOfNeighbors.push(rightNeighbor)\n        arrayOfNeighbors.push(bottomRighNeighbor)\n        arrayOfNeighbors.push(bottomNeighbor)\n        arrayOfNeighbors.push(bottomLeftNeighbor)\n        arrayOfNeighbors.push(leftNeighbor)\n\n        return arrayOfNeighbors\n    } catch(e){\n        \n    }\n\n}\n\n// G Cost = distance from starting node \n// // TODO: Sometimes you want to update the g cost, sometimes you don't\nfunction calculateGCost(currentNode, startNode){\n    let {row, col} = currentNode\n\n    let yDistance = Math.abs(col - startNode.col)\n    let xDistance = Math.abs(row - startNode.row)\n\n    let gCost = Math.floor(Math.sqrt((xDistance + yDistance) * 10))\n    \n    return gCost\n}\n\n// ! H cost = distance from end node\nfunction calculateHCost(currentNode, endNode){    \n    let {row, col} = currentNode    \n    //Euclidean Distance\n    // let value = Math.floor(Math.sqrt(Math.abs((row-endNode.row)*2 + (col-endNode.col)*2)))\n    // return value\n    \n    //Diagonal Distance\n    // let value = Math.max(Math.abs(row+endNode.row), Math.abs(col+endNode.col))\n    // return value\n\n    //Manhattan Distance\n    let v1 = Math.abs(endNode.row - row)\n    let v2 = Math.abs(endNode.col - col)\n    return v1 + v2\n}\n\n// ! F cost = G cost + H cost\nfunction updateFCost(currentNode){\n    currentNode.fCost = currentNode.gCost + currentNode.hCost\n    return\n}\n\n// // TODO: May need to modify this so that the open array is being searched\nfunction getLowestFCostNodeFromOpenArray(open){\n    let min = Infinity\n    let minNode = null    \n\n    open.forEach(currentNode => {                \n        if(currentNode.fCost < min){\n            min = currentNode.fCost            \n            minNode = currentNode\n        }\n    })\n    \n    return minNode\n}\n\nfunction inClosedArray(node, closed){\n\n    let {row, col} = node    \n\n    for(let i = 0; i < closed.length; i++){    \n        //console.log(\"-\")\n        let currentNode = closed[i]\n        if(row === currentNode.row && col === currentNode.col){\n            return true\n        }\n    }\n\n    return false\n}\n\nfunction inOpenArray(node, open){\n\n    let {row, col} = node    \n\n    for(let index in open){\n        let currentNode = open[index]\n        if(row === currentNode.row && col === currentNode.col){\n            return true\n        }\n    }\n\n    return false\n}\n\nfunction removeFromArray(node, array){\n\n    let {row, col} = node\n\n    for(let index in array){\n       let currentNode = array[index]\n\n       if(currentNode.row === row && currentNode.col === col){\n            array.splice(index, 1);\n       }\n   } \n}\n\nexport default aStar;\n// module.exports = aStar;\n\n\n\n/*\n * Euclidean Distance Heuristic:\n * h = sqrt ( (current_cell.x – goal.x)2 + (current_cell.y – goal.y)2 ) \n\n! Cost = distance from starting node \n    ? -top left corner\n\n! H cost = distance from end node\n    ? -top right corner    \n\n! F cost = G cost + H cost\n    ? - center\n\n*/\n\n/**\n     *  currentNode = A -> topLeft\n     * \n     *  open = [48, 62, 62, 70, 62, 62, 48, 48, 62, 48, 48, 62, 48]\n     *  closed = [A, A->42, A->42->42]\n     *      \n     * \n     *  neighbors = [ A, ]\n     *                |\n     *  currentNeighbor = 42\n     * \n     */","let copyObjects = require('./copyObjects');\n\nfunction dikstra(mainGrid, startNode, endNode, numRows, numCols){\n    \n    let grid = copyObjects.copy2dArrayOfObjects(mainGrid);\n\n    let finalArray = []\n\n    // startNode.isAStarStart = true;\n    \n    //* 1.)\n    let open = []\n    //* 2.)\n    let closed = []\n    \n    open.push(startNode)\n    \n    while(open.length > 0){\n        //get node with lowest f cost\n        let currentNode = getLowestFCostNodeFromOpenArray(open)        \n        // console.log(1)            \n\n        // finalArray.push(currentNode)\n        \n        if(currentNode.parent != null){ //---------------->\n        //if(currentNode != null){\n            //finalArray.push(currentNode.parent)            \n        }        \n\n        removeFromArray(currentNode, open)        \n\n        if(currentNode.row === endNode.row && currentNode.col === endNode.col){            \n            // console.log(\"Reached Destination\")\n            return finalArray\n        }\n        \n        if(inClosedArray(currentNode, closed) || currentNode.isWall){\n            continue\n        }        \n\n        let neighbors = getNeighbors(currentNode, grid, numRows, numCols)        \n\n        for(let index in neighbors){            \n            let currentNeighbor = neighbors[index]\n\n            if(currentNeighbor.isWall){\n                continue\n            }\n\n            // if at destination\n            if(currentNeighbor.row === endNode.row && currentNeighbor.col === endNode.col){            \n                console.log(\"Reached Destination\")\n                return finalArray\n            }\n\n            // recently added\n            if(currentNeighbor.isStart === true){\n                continue\n            }            \n\n            if(!inOpenArray(currentNeighbor, open) || currentNeighbor.parent == null || currentNeighbor.parent.fCost < currentNode.fCost/* new path to currentNeighbor is shorter */){                  \n                currentNeighbor.gCost = calculateGCost(currentNeighbor, startNode)\n                currentNeighbor.hCost = calculateHCost(currentNeighbor, endNode)\n                currentNeighbor.fCost = currentNeighbor.hCost\n                \n                currentNeighbor.parent = currentNode\n\n                // console.log(`---- neighbor ${currentNeighbor.row},${currentNeighbor.col} [g: ${currentNeighbor.gCost} h: ${currentNeighbor.hCost} f: ${currentNeighbor.fCost}]`)\n\n                // currentNode.parent = currentNeighbor\n\n                // NEW\n                finalArray.push(currentNeighbor)                \n\n                if(!inOpenArray(currentNeighbor, open)){\n                    open.push(currentNeighbor)\n                }\n            }            \n        }\n        closed.push(currentNode)        \n        \n    }\n\n    console.log('did not reach destination')\n}\n\nfunction getNeighbors(currentNode, grid){\n    let {row, col} = currentNode\n\n    //the column of the start node detemines the currentNodes gCost\n    // Math.abs(col*sqrt(2) - startNode.col*sqrt(2))\n    \n    try{\n    let topLeftNeighbor = grid[row-1][col-1]\n    let topNeighbor = grid[row-1][col]\n    let topRightNeighbor = grid[row-1][col+1]\n    let rightNeighbor = grid[row][col+1]\n    let bottomRighNeighbor = grid[row+1][col+1]\n    let bottomNeighbor = grid[row+1][col]\n    let bottomLeftNeighbor = grid[row+1][col-1]\n    let leftNeighbor = grid[row][col-1]  \n\n    let arrayOfNeighbors = []\n\n    arrayOfNeighbors.push(topLeftNeighbor)\n    arrayOfNeighbors.push(topNeighbor)\n    arrayOfNeighbors.push(topRightNeighbor)\n    arrayOfNeighbors.push(rightNeighbor)\n    arrayOfNeighbors.push(bottomRighNeighbor)\n    arrayOfNeighbors.push(bottomNeighbor)\n    arrayOfNeighbors.push(bottomLeftNeighbor)\n    arrayOfNeighbors.push(leftNeighbor)\n\n\n    return arrayOfNeighbors\n    } catch(e){\n\n    }\n\n    \n\n}\n\n// G Cost = distance from starting node \n// // TODO: Sometimes you want to update the g cost, sometimes you don't\nfunction calculateGCost(currentNode, startNode){\n    let {row, col} = currentNode\n\n    let yDistance = Math.abs(col - startNode.col)\n    let xDistance = Math.abs(row - startNode.row)\n\n    let gCost = Math.floor(Math.sqrt((xDistance + yDistance) * 10))\n    \n    return gCost\n}\n\n// ! H cost = distance from end node\nfunction calculateHCost(currentNode, endNode){    \n    let {row, col} = currentNode    \n    //Euclidean Distance\n    // let value = Math.floor(Math.sqrt(Math.abs((row-endNode.row)*2 + (col-endNode.col)*2)))\n    // return value\n    \n    //Diagonal Distance\n    // let value = Math.max(Math.abs(row+endNode.row), Math.abs(col+endNode.col))\n    // return value\n\n    //Manhattan Distance\n    // let v1 = Math.abs(endNode.row - row)\n    // let v2 = Math.abs(endNode.col - col)\n    // return v1 + v2\n\n    return 0\n}\n\n// ! F cost = G cost + H cost\nfunction updateFCost(currentNode){\n    currentNode.fCost = currentNode.gCost + currentNode.hCost\n    return\n}\n\n// // TODO: May need to modify this so that the open array is being searched\nfunction getLowestFCostNodeFromOpenArray(open){\n    let min = Infinity\n    let minNode = null    \n\n    open.forEach(currentNode => {                \n        if(currentNode.fCost < min){\n            min = currentNode.fCost            \n            minNode = currentNode\n        }\n    })\n    \n    return minNode\n}\n\nfunction inClosedArray(node, closed){\n\n    let {row, col} = node    \n\n    for(let i = 0; i < closed.length; i++){    \n        //console.log(\"-\")\n        let currentNode = closed[i]\n        if(row === currentNode.row && col === currentNode.col){\n            return true\n        }\n    }\n\n    return false\n}\n\nfunction inOpenArray(node, open){\n\n    let {row, col} = node    \n\n    for(let index in open){\n        let currentNode = open[index]\n        if(row === currentNode.row && col === currentNode.col){\n            return true\n        }\n    }\n\n    return false\n}\n\nfunction removeFromArray(node, array){\n\n    let {row, col} = node\n\n    for(let index in array){\n       let currentNode = array[index]\n\n       if(currentNode.row === row && currentNode.col === col){\n            array.splice(index, 1);\n       }\n   } \n}\n\nexport default dikstra;","let copyObjects = require('./copyObjects');\n\n//Pick random number between 1 and 4: Math.floor(Math.random()*4)\n\nfunction generateMaze(mainGrid, numRows, numCols){\n    let grid = copyObjects.copy2dArrayOfObjects(mainGrid);\n    let result = []\n\n    createChamber(grid, result, numRows, numCols)\n\n    let topLeftNode = grid[0][0]\n    let topRightNode = grid[numRows-1][numCols-1]\n    let bottomRightNode = grid[numRows-1][numCols-1]\n    let bottomLeftNode = grid[numRows-1][0]\n    \n    generateMazeRec(grid, topLeftNode, topRightNode, bottomRightNode, bottomLeftNode, result);\n    \n    console.log('done')\n    return result\n\n}\n\nfunction generateMazeRec(grid, topLeftNode, topRightNode, bottomRightNode, bottomLeftNode, result){    \n\n    let numRows = bottomRightNode.row-1\n    let numCols = bottomRightNode.col-1    \n\n    let width = bottomRightNode.col - topLeftNode.col\n    let height = bottomRightNode.row - topLeftNode.row\n\n    console.log(\"Width \" + width)\n    console.log(\"Height \" + height)\n\n    if(width < 2 && height < 2){\n        return\n    }\n\n    let orientation = chooseOrientation(width, height)\n\n    if(orientation === 'HORIZONTAL'){\n        let newCorners = bisectHorizontally(grid, topLeftNode, bottomRightNode, numRows, numCols, result)          \n        let newTopLeftNode = newCorners[0]\n        let newTopRightNode = newCorners[1]        \n        let newBottomRightNode = newCorners[2]\n        let newBottomLeftNode = newCorners[3]\n\n        console.log(`new corners H: topLeft: (${newTopLeftNode.row}, ${newTopLeftNode.col}) topRight: (${newTopRightNode.row}, ${newTopRightNode.col})`)\n        console.log(`new corners H: bottomRight: (${newBottomRightNode.row}, ${newBottomRightNode.col}) bottomLeft: (${newBottomLeftNode.row}, ${newBottomLeftNode.col})`)\n\n        //! ------------------------------------------------\n        //! NOTE maybe calculate new top nodes for top and bottom for horizontal bar, and new top nodes for both left and right side of bar for vertical\n        //! ------------------------------------------------\n\n        //recurse above\n        // generateMazeRec(grid, newTopLeftNode, newTopRightNode, topRightNode, topLeftNode, result)        \n\n        //recurse below                \n        generateMazeRec(grid, newTopLeftNode, topRightNode, newBottomRightNode, bottomLeftNode, result)        \n\n    } else if(orientation === 'VERTICAL'){\n        let newCorners = bisectVertically(grid, topLeftNode, bottomRightNode, numRows, numCols, result)                  \n        let newTopLeftNode = newCorners[0]\n        let newTopRightNode = newCorners[1]        \n        let newBottomRightNode = newCorners[2]\n        let newBottomLeftNode = newCorners[3]\n        \n        // console.log(`new corners: topLeft: (${newTopLeftNode.row}, ${newTopLeftNode.col}) bottomRIght: (${newBottomRightNode.row}, ${newBottomRightNode.col})`)\n        console.log(`new corners V: topLeft: (${newTopLeftNode.row}, ${newTopLeftNode.col}) topRight: (${newTopRightNode.row}, ${newTopRightNode.col})`)\n        console.log(`new corners V: bottomRight: (${newBottomRightNode.row}, ${newBottomRightNode.col}) bottomLeft: (${newBottomLeftNode.row}, ${newBottomLeftNode.col})`)\n\n        //recurse on right\n        generateMazeRec(grid, newTopLeftNode, topRightNode, newBottomRightNode, bottomLeftNode, result)\n\n        //recurse on left        \n        generateMazeRec(grid, topLeftNode, newTopLeftNode, bottomLeftNode, newBottomLeftNode, result)        \n    }\n    \n}\n\nfunction bisectHorizontally(grid, topLeftNode, bottomRightNode, numRows, numCols, result){       \n    let randomRowIndex = getRandomNumberBetween(topLeftNode.row+2, bottomRightNode.row-2)    \n    let randomGap = getRandomNumberBetween(topLeftNode.col+2, bottomRightNode.col-1) //6\n    console.log(\"random row: \" + randomRowIndex)\n    console.log(\"random gap: \" + randomGap)\n\n    let newTopLeftNode = grid[randomRowIndex][topLeftNode.row]\n    let newTopRightNode = grid[randomRowIndex][bottomRightNode.col]\n    let newBottomRightNode = grid[bottomRightNode.row][bottomRightNode.col]\n    let newBottomLeftNode = grid[bottomRightNode.row][topLeftNode.row]\n\n    for(let i = topLeftNode.row; i < bottomRightNode.col; i++){\n        if(i === randomGap || grid[randomRowIndex][i].isStart === true || grid[randomRowIndex][i].isFinish === true){\n            continue\n        }\n        // if(grid[randomRowIndex][i].isWall === true){\n        //     return [newTopLeftNode, newTopRightNode, newBottomRightNode, newBottomLeftNode]\n        // }\n        grid[randomRowIndex][i].isWall = true;        \n        result.push(grid[randomRowIndex][i])\n    }\n\n    return [newTopLeftNode, newTopRightNode, newBottomRightNode, newBottomLeftNode]\n}\n\nfunction bisectVertically(grid, topLeftNode, bottomRightNode, numRows, numCols, result){    \n    let randomColIndex = getRandomNumberBetween(topLeftNode.row+2, bottomRightNode.col-1)\n    \n    let randomGap = getRandomNumberBetween(topLeftNode.row+2, bottomRightNode.row-1) //6\n    \n    console.log(randomColIndex)\n    console.log(randomGap)\n\n    for(let i = topLeftNode.row; i < bottomRightNode.row; i++){        \n        if(i === randomGap || grid[i][randomColIndex].isStart === true || grid[i][randomColIndex].isFinish){\n            continue\n        }\n        grid[i][randomColIndex].isWall = true;        \n        result.push(grid[i][randomColIndex])\n    }\n    \n    let newTopLeftNode = grid[topLeftNode.row][randomColIndex]\n    let newBottomRightNode = grid[bottomRightNode.row][bottomRightNode.col]\n    let newTopRightNode = grid[topLeftNode.row][bottomRightNode.col]\n    let newBottomLeftNode = grid[bottomRightNode.row][randomColIndex]\n    \n    return [newTopLeftNode, newTopRightNode, newBottomRightNode, newBottomLeftNode]\n    \n}\n\nfunction getRandomNumberBetween(min,max){    \n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\nfunction chooseOrientation(width, height){\n    if(width < height){\n        return 'HORIZONTAL'\n    } else if(width > height){\n        return 'VERTICAL'\n    }\n    let rand = getRandomNumberBetween(0,1)\n    if(rand === 1){\n        return 'HORIZONTAL'\n    } else {\n        return 'VERTICAL'\n    }\n}\n\nfunction createChamber(grid, result, numRows, numCols){\n    for(let i = 0; i < numCols; i++){\n        grid[0][i].isWall = true\n        result.push(grid[0][i])\n    }\n\n    for(let i = 0; i < numRows; i++){\n        grid[i][numCols-1].isWall = true;\n        result.push(grid[i][numCols-1])\n    }\n\n    for(let i = numCols-1; i > 0; i--){\n        grid[numRows-1][i].isWall = true;\n        result.push(grid[numRows-1][i])\n    }\n\n    for(let i = numRows-1; i > 0; i--){\n        grid[i][0].isWall = true\n        result.push(grid[i][0])\n    }\n}\n\nmodule.exports = generateMaze;","import React, { Component } from 'react';\n\nimport './styles.css';\n\nclass Node extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            \n        };\n    }\n\n    render() {\n        const {\n            // value, \n            row, \n            col, \n            isStart, \n            isFinish, \n            visited,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp \n        } = this.props;        \n        //? assign class depending on value passed to prop using terinary operator\n        //! <true/false statement> ? <if true, this runs> : <if false, this runs> ;\n        const extraClassName = isStart \n        ? 'node-start' \n        : isFinish \n        ? 'node-finish'\n        : visited\n        ? 'node-visited'\n        : isWall\n        ? 'node-wall'\n        : \"\";\n\n        return (\n            //assigning multiple classNames to a Node\n            <div \n                className={`node ${extraClassName}`} \n                onMouseDown={() => onMouseDown(row, col)} \n                onMouseEnter={() => onMouseEnter(row, col)} \n                onMouseUp={() => onMouseUp(row, col)}>\n                    {/* {value} */}\n            </div>\n        )\n    }\n}\n\nexport default Node;\n// export const DEFAULT_NODE = {\n//     row: 0,\n//     col: 0,\n// };\n\n/*\n    onMouseDown happens when you press you're mouse button, not when you release it\n    onMouseUp happens when you release\n    onClick happens when you press and release    \n    mouseEnter happens when you hover above an element\n*/","import React, { Component } from 'react';\nimport Collapsible from 'react-collapsible';\n\nimport Node from './Node/Node';\nimport '../styles/style.css';\n\nimport {\n    clone,\n    copy2dArrayOfObjects,\n    modify\n} from '../algorithms/copyObjects';\n\nlet GraphNode = require('../dataStructures/GraphNode').default;\n\nlet bfs = require('../algorithms/bfs').default;\nlet dfs = require('../algorithms/dfs').default;\nlet aStar = require('../algorithms/aStar').default;\nlet dijkstra = require('../algorithms/dijkstra').default;\n\n\nlet generateMaze = require('../algorithms/mazeGeneration').default;\nlet copyObjects = require('../algorithms/copyObjects').default;\n\nlet DEFAULT_START_NODE_ROW = 10;\nlet DEFAULT_START_NODE_COL = 18;\nlet DEFAULT_FINISH_NODE_ROW = 10;\nlet DEFAULT_FINISH_NODE_COL = 31;\n\nconst numRows = 20;\nconst numCols = 50;\n\nlet start = true;\n\nclass PathFinder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            clickedStart: false,\n            clickedFinish: false\n\n        };\n    }\n\n    componentDidMount() {\n        // create grid when component is first rendered\n        const grid = this.createDefaultGrid();\n        \n        this.setState({\n            grid: grid\n        });\n    }\n\n    clear(){\n        const newGrid = this.createDefaultGrid();        \n\n        this.setState({\n            grid: newGrid\n        })\n    }\n\n    stopAlgorithm(){\n        // this.setState({ state: this.state })  \n        window.location.reload(false)                      \n    }\n\n    //when mouse button is pressed\n    handleMouseDown(row, col){\n        //if the start node is clicked\n        if(row === DEFAULT_START_NODE_ROW && col === DEFAULT_START_NODE_COL){\n            console.log(\"clicked Start node\")\n\n            const newGrid = this.getNewGridWithUpdatedStartNode(this.state.grid, row, col, DEFAULT_START_NODE_ROW, DEFAULT_START_NODE_COL)        \n            this.setState({\n                grid: newGrid,\n                clickedStart: true\n            })\n            return\n        }\n\n        if(row === DEFAULT_FINISH_NODE_ROW && col === DEFAULT_FINISH_NODE_COL){\n            console.log(\"clicked End node\")\n\n            const newGrid = this.getNewGridWithUpdatedFinishNode(this.state.grid, row, col, DEFAULT_FINISH_NODE_ROW, DEFAULT_FINISH_NODE_COL)        \n            this.setState({\n                grid: newGrid,\n                clickedFinish: true\n            })\n            return\n        }\n        \n        const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({\n            grid: newGrid,\n            mouseIsPressed: true\n        })\n        console.log(`pressed mouse button on node (${row},${col})`)\n    }\n//////////////////////////////////////////\n    //when mouse is hovering\n    handleMouseEnter(row, col){        \n        \n        //if the start button is clicked\n        // if(row === DEFAULT_START_NODE_ROW && col === DEFAULT_START_NODE_COL){\n        if(this.state.clickedStart){\n            const newGrid = this.getNewGridWithUpdatedStartNode(this.state.grid, row, col, DEFAULT_START_NODE_ROW, DEFAULT_START_NODE_COL)\n            this.setState({\n                grid: newGrid,                \n            })\n            return\n        }\n        if(this.state.clickedFinish){\n            const newGrid = this.getNewGridWithUpdatedFinishNode(this.state.grid, row, col, DEFAULT_FINISH_NODE_ROW, DEFAULT_FINISH_NODE_COL)\n            this.setState({\n                grid: newGrid,                \n            })\n            return\n        }\n        //if the mouse isnt pressed, do nothing\n        if(!this.state.mouseIsPressed){\n            // console.log(`hovering over node ${row},${col}`)\n            \n            return\n        };\n        \n        console.log(`hovering over node (${row},${col})`)\n        let newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col)\n        this.setState({\n            grid: newGrid\n        })\n\n    }\n\n    //when you release mouse button\n    handleMouseUp(row, col){\n        //once you release the mouse button, set mouseIsPressed to false\n        //console.log(`release mouse button on node (${row},${col})`)\n        this.setState({\n            mouseIsPressed: false,\n            clickedStart: false,\n            clickedFinish: false\n        })\n    }\n\n    //visualizeBFS(startNode, endNode){\n    visualizeBFS(){        \n\n        const {grid} = this.state;\n\n        const startNode = grid[DEFAULT_START_NODE_ROW][DEFAULT_START_NODE_COL];\n        const finishNode = grid[DEFAULT_FINISH_NODE_ROW][DEFAULT_FINISH_NODE_COL];\n\n        const visitedNodes = bfs(grid, startNode, finishNode, numRows, numCols);\n\n        this.animate(visitedNodes);\n\n    }\n\n    visualizeDFS(){\n        const {grid} = this.state;\n\n        const startNode = grid[DEFAULT_START_NODE_ROW][DEFAULT_START_NODE_COL];\n        const finishNode = grid[DEFAULT_FINISH_NODE_ROW][DEFAULT_FINISH_NODE_COL];\n\n        let visitedNodes = dfs(grid, startNode, finishNode, numRows, numCols);        \n\n        this.animate(visitedNodes);\n    }\n\n    visualizeAStar(){\n        const {grid} = this.state;\n\n        const startNode = grid[DEFAULT_START_NODE_ROW][DEFAULT_START_NODE_COL];\n        const finishNode = grid[DEFAULT_FINISH_NODE_ROW][DEFAULT_FINISH_NODE_COL];\n\n        let visitedNodes = aStar(grid, startNode, finishNode, numRows, numCols);\n\n        this.animate(visitedNodes);\n    }\n\n    visualizeDijkstra(){\n        const {grid} = this.state;\n\n        const startNode = grid[DEFAULT_START_NODE_ROW][DEFAULT_START_NODE_COL];\n        const finishNode = grid[DEFAULT_FINISH_NODE_ROW][DEFAULT_FINISH_NODE_COL];\n\n        let visitedNodes = dijkstra(grid, startNode, finishNode, numRows, numCols);\n\n        this.animate(visitedNodes);\n\n    }\n\n    createMaze(){\n        const {grid} = this.state;\n\n        let visitedNodes = generateMaze(grid, numRows, numCols)\n\n        this.animateMaze(visitedNodes)\n    }\n\n    animate(visitedNodes){\n        for(let index in visitedNodes){\n            setTimeout(() => {\n                if(!start){\n                    return\n                }\n\n                const updatedGrid = copy2dArrayOfObjects(this.state.grid);\n                const currentNode = visitedNodes[index]; \n                \n                updatedGrid[currentNode.row][currentNode.col].visited = true; \n                \n                this.setState({\n                    grid: updatedGrid\n                })\n            }, 50 * index)\n        }\n    }    \n\n    animateMaze(visitedNodes){\n        for(let index in visitedNodes){\n            setTimeout(() => {\n                if(!start){\n                    return\n                }\n\n                const updatedGrid = copy2dArrayOfObjects(this.state.grid);\n                const currentNode = visitedNodes[index]; \n                \n                updatedGrid[currentNode.row][currentNode.col].isWall = true; \n                \n                this.setState({\n                    grid: updatedGrid\n                })\n            }, 35 * index)\n        }\n    }\n\n    render() {\n        const {grid} = this.state;  \n        \n        let count = 0;        \n\n        return (\n            <>\n            {/* <button onClick={() => this.createMaze()}>\n                Create Maze\n            </button> */}    \n            <Collapsible trigger=\"Help\" className=\"help\">\n                <p className=\"start_text\">• Green = start</p>\n                <p className=\"end_text\">• Red = finish</p>\n                <p className=\"regular_text\">• Clear = remove walls / visited nodes ( If algorithm is in mid execution, algorithm will continue running after clear )</p>\n                <p className=\"regular_text\">• Click and drag on grid to create walls</p>\n                <p className=\"regular_text\">• After running an algorithm, if you click another algorithm and it does not animate, click the 'restart' button</p>                          \n            </Collapsible>\n\n            <Collapsible trigger=\"Algorithm Guide\" className=\"algo\">\n                <Collapsible trigger=\"Breadth First Search ( BFS )\">    \n                <div className=\"regular_text\">                \n                    <p>\n                    <h1>Summary</h1>\n                    BFS is an algorithm that, starting at a root node, visits all of that root's neighbors. Neighbors are also nodes, and 'root' is just a name for the starting node. After visiting all the neighbors of\n                    the root, it visits all the neighbors of the root's neighbors. This pattern continues in a recursive fashion until eventually, the target node is a neighbor.                    \n                    </p>\n                    <p>                    \n                    This behavior, similar to dropping a rock in a pond and having the ripples expand outward, is captured programmatically through the use of a queue.\n                    </p>\n                    <p>\n                    <h1>How it Works</h1>\n                    A node (beginning with the root node) is enqueued into a queue. While the queue is not empty, the node that is next in line is dequeued from the queue, and then each of that nodes\n                    neighbors is enqueued into the queue. A check is performed to see if at any point a neighbor is the target node.\n                    </p>\n                </div>\n                    \n                </Collapsible>\n                <Collapsible trigger=\"Depth First Search ( DFS )\">\n                <div className=\"regular_text\">                \n                    <p>\n                    <h1>Summary</h1>\n                    DFS is an algorithm that, starting at a root node, picks a single neighbor. A neighbor is also a node, and 'root' is just a name for the starting node. After picking one neighbor of the root, it picks\n                    a single neighbor of the roots neighbor. The idea is to pick a single route, and to go as far down that route as possible. After reaching the end of that route, it starts at the beginning and then \n                    picks another unvisited route.\n                    </p>\n                    <p>                    \n                    Similar to driving as far down a road as possible, reversing and then going as far as you can down another road until you visit all the roads in your neighborhood\n                    , this behavior is captured programmatically through the use of recursion programming.\n                    </p>\n                    <p>\n                    <h1>How it Works</h1>\n                    Iterate through all the neighbors of a node (beginning with the root node) in a DFS function that accepts a root as a parameter. For each neighbor, call DFS again with that \n                    neighbor passed as the root. Continually check if the root is the target node.                     \n                    </p>\n                </div>\n                </Collapsible>\n                <Collapsible trigger=\"A* ( A star )\">\n                <div className=\"regular_text\">                \n                    <p>\n                        <h1>Summary</h1>\n                        A* is a pathfinding algorithm backed by simple artificial intelligence. It uses hueristics to make an educated guess at every node, and by doing this it dynamically finds the shortest path to a target node. It's quicker\n                        than Dijkstra's, but only on the condition that the location of the target node is known.\n                    </p>\n\n                    <h1>How it Works</h1>\n                    <p>\n                        <h3>Basics</h3>    \n                        Every node has 3 costs associated with it: a G cost (distance the node is from the starting node), an H cost (distance the node is from the target node) \n                        and an F cost (sum of the G and H cost). Every neighbor of the node has it's F cost calcuated via a hueristic, and whichever node has the lowest F cost is visited next. The choosing\n                        of the lowest F cost is the educated guess that the algorithm is making.\n                    </p>\n                    <p>\n                        <h3>Hueristics: Calculating the H Cost</h3>\n                        <li>\n                        Manhattan distance (what this visualizer uses)\n                        </li>\n                        <ul>\n                            <li type=\"circle\">\n                            HCost = Math.abs(target_node_row - current_node_row) + Math.abs(target_node_col - current_node_col)\n                            </li>\n                            <li type=\"circle\">\n                                This hueristic is used when a node is allowed to move in four directions (up, down, left, right)\n                            </li>  \n                        </ul>\n                        <li>\n                        Diagonal distance\n                        </li>\n                        <ul>\n                            <li type=\"circle\">\n                            H Cost = Max(Math.abs(current_node_row + target_node_row), Math.abs(current_node_col + current_node_col))\n                            </li>\n                            <li type=\"circle\">\n                                This hueristic is used when a node is allowed to move in 8 directions (up, down, left, right, all corners)\n                            </li>                   \n                        </ul>                                            \n                        <h3>Hueristics: Calculating the G Cost</h3>\n                        <li>\n                        There are differnt ways to calculate the G Cost depending on the application. Since this visualizer uses a 2-d grid, this formula is used:\n                        <ul>\n                            <li type=\"circle\">\n                            G Cost = (sqrt(Math.abs(current_node_col - start_node_col) + Math.abs(current_node_row - start_node_row)) * 10)\n                            </li>                                       \n                        </ul>\n                        </li>\n                    </p>  \n                </div>\n                </Collapsible>\n                <Collapsible trigger=\"Dijkstra\">\n                    <div className=\"regular_text\"> \n                        <p>\n                            <h1>Summary</h1>\n                            Dijkstra's is a pathfinding algorithm that finds the shortest cost to a target node. Initially it does not know where the target node is, unlike A*.\n                        </p>\n\n                        <p>\n                            <h1>How it Works</h1>\n                            The tentative cost of each node is set to infinity, escept the initial node which is set to 0. At each node, \n                            the cost of its neighbors is calculated by taking the distance of that node added to the edge cost inbetween the current node and the neighbor. \n                            This is done for each neighbor.\n                        </p>\n                        <p>\n                            The costs of the neighbor nodes are either updated/ left alone depending on the lowest calculated distance. Once all nodes have been visited, the shortest \n                            cost path can be followed.                        \n                        </p>\n                    </div> \n                </Collapsible>\n                {/*  */}\n            </Collapsible>\n            <button onClick={() => this.visualizeBFS()} className=\"button\">\n                Visualize Breadth First Search Algorithm\n            </button>            \n            <button onClick={() => this.visualizeDFS()} className=\"button\">\n                Visualize Depth First Search Algorithm\n            </button>\n            <button onClick={() => this.visualizeAStar()} className=\"button\">\n                Visualize A*\n            </button>            \n            <button onClick={() => this.visualizeDijkstra()} className=\"button\">\n                Visualize Dijkstra's\n            </button>\n            <button onClick={() => this.clear()} className=\"button\">\n                Clear\n            </button>\n            <button onClick={() => this.stopAlgorithm()} className=\"button\">\n                Restart\n            </button>\n            <div className=\"grid\">\n            {/* Map can have three parameters: value, index, array */}\n                {grid.map( (row, rowIdx) => {\n                    return (\n                        <div key={rowIdx}>\n                            {row.map((node, nodeIdx) => {                                \n                                // obtaing the current node and create a div for it\n                                const {value, row, col, isStart, isFinish, visited, isWall} = node;\n                                return (\n                                    <Node \n                                        key={count++} \n                                        value={value}\n                                        row={row}\n                                        col={col}\n                                        isStart={isStart}\n                                        isFinish={isFinish}\n                                        visited={visited}\n                                        isWall={isWall}\n                                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                        onMouseUp={(row, col) => this.handleMouseUp(row, col)}\n                                    />\n                                )\n                            }) }                            \n                        </div>\n                    )\n                })}                \n            </div>\n            </>\n        )\n    }\n\n    createDefaultGrid(){\n        const grid = [];\n        for (let row = 0; row < numRows; row++){\n            const currentRow = [];\n            for(let col = 0; col < numCols; col++) {                \n                const currentNode = new GraphNode(\"\", row, col);                \n                currentNode.isStart = row === DEFAULT_START_NODE_ROW && col === DEFAULT_START_NODE_COL;\n                currentNode.isFinish = row === DEFAULT_FINISH_NODE_ROW && col === DEFAULT_FINISH_NODE_COL;\n                \n                currentRow.push(currentNode);\n            }\n            grid.push(currentRow);\n            //! At this point, each index contains a graphNode\n        }\n        return grid;\n    }\n\n    getNewGridWithWallToggled(grid, row, col){\n            const newGrid = copy2dArrayOfObjects(grid)\n            const node = newGrid[row][col]\n            const newNode = clone(node)\n            newNode.isWall = true\n            newGrid[row][col] = newNode\n            return newGrid\n    }\n\n    getNewGridWithUpdatedStartNode(grid, row, col, oldRow, oldCol){\n        const newGrid = copy2dArrayOfObjects(grid)        \n        \n        const oldStartNode = newGrid[oldRow][oldCol]\n        const newStartNode = newGrid[row][col]\n\n        const oldStartNodeCopy = clone(oldStartNode)\n        const newStartNodeCopy = clone(newStartNode)\n\n        DEFAULT_START_NODE_ROW = row\n        DEFAULT_START_NODE_COL = col  \n\n        oldStartNodeCopy.isStart = false\n        newStartNodeCopy.isStart = true\n        \n        newGrid[oldRow][oldCol] = oldStartNodeCopy        \n        newGrid[row][col] = newStartNodeCopy\n\n        return newGrid\n    }\n    \n    getNewGridWithUpdatedFinishNode(grid, row, col, oldRow, oldCol){\n        const newGrid = copy2dArrayOfObjects(grid)        \n        \n        const oldFinishNode = newGrid[oldRow][oldCol]\n        const newFinishNode = newGrid[row][col]\n\n        const oldStartNodeCopy = clone(oldFinishNode)\n        const newStartNodeCopy = clone(newFinishNode)\n\n        DEFAULT_FINISH_NODE_ROW = row\n        DEFAULT_FINISH_NODE_COL = col  \n\n        oldStartNodeCopy.isFinish = false\n        newStartNodeCopy.isFinish = true\n        \n        newGrid[oldRow][oldCol] = oldStartNodeCopy        \n        newGrid[row][col] = newStartNodeCopy\n\n        return newGrid\n    }\n}\n\nexport default PathFinder;\n\n/**\n * NOTES:\n * \n * TODO: When someone clicks a node, have a pop up that gives choice of setting start and end node\n * \n * \n * \n */","import React from 'react';\n\nimport logo from '../logo.svg';\n//import '../styles/style.css';\nimport '../styles/App.css';\nimport PathFinder from './PathFinder';\n\nfunction App() {\n  return (\n    <div className=\"App\">          \n      <PathFinder />      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//! Here is where the App component is being called\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}